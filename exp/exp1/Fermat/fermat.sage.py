# -*- coding: utf-8 -*-
# This file was *autogenerated* from the file fermat.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_1000 = Integer(1000); _sage_const_7025 = Integer(7025)
import random
import time

def gdc(a,b):                   #计算a,b的最大公因数
    while(b!=_sage_const_0 ):
        r=a%b
        a=b
        b=r
    return a
def modpow(b,n,m):              #利用模重复平方算法计算b^n(mod m)
    a=_sage_const_1 
    while(n!=_sage_const_0 ):
        r=n%_sage_const_2                    #这一步与n=n//2即把n拆成一个二进制数
        if(r==_sage_const_1 ):
            a=(a*b)%m           
        b=(b*b)%m               #模的平方
        n=n//_sage_const_2 
    return a
def fermattest(n):              #Fermat素性检验
    start=time.time()
    i=_sage_const_0 
    while(i<_sage_const_10 ):                #随机生成10个基b对n进行检验
        b=random.randrange(_sage_const_1 ,n)
        if(gdc(n,b)!=_sage_const_1 ):        #最大公因数不为1则不是素数
            fout.write("NO %.4fms\n"%((time.time()-start)*_sage_const_1000 ))
            return
        elif(modpow(b,n-_sage_const_1 ,n)!=_sage_const_1 ):   #利用Fermat定理,b^(n-1)(mod n)不等于1,n不是素数
            fout.write("NO %.4fms\n"%((time.time()-start)*_sage_const_1000 ))
            return
        i=i+_sage_const_1 
    fout.write("YES %.4fms\n"%((time.time()-start)*_sage_const_1000 ))     #检验完毕，n是素数
    return
def isprime(n):                 #暴力算法进行检验
    start=time.time()
    i=_sage_const_3 
    while(i*i<=n):
        if(n%i==_sage_const_0 ):
            fout.write("NO %.4fms/\n"%((time.time()-start)*_sage_const_1000 ))
            return
        i=i+_sage_const_2 
    fout.write("YES %.4fms/\n"%((time.time()-start)*_sage_const_1000 ))
    return

fin=open("input.txt","r")
fout=open("output.txt","w")
for i in fin:
    n=int(i)                    #从input中读取数据转化为一个整数
    fermattest(n)               #用Fermat素性检验进行检验
    #isprime(n)                 #暴力检验
fermattest(_sage_const_2 **_sage_const_7025 -_sage_const_1 )
fin.close()
fout.close()
