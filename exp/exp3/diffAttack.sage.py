# This file was *autogenerated* from the file diffAttack.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_48 = Integer(48); _sage_const_8 = Integer(8); _sage_const_64 = Integer(64); _sage_const_28 = Integer(28); _sage_const_16 = Integer(16); _sage_const_32 = Integer(32); _sage_const_2000000 = Integer(2000000)
from Permutation import *
from DES3R import *
from DES import *
from random import *

#Xor 2 Binary String, output width fixed
def Xor(in1,in2,width):
	a = long(in1,_sage_const_2 )
	b = long(in2,_sage_const_2 )
	c = a^b
	return Bin(c,width)

#get a possible Round3 Keys' set using a randomly generate plaintext
def getKeySet():
	while(True):
		La = randint(_sage_const_0 ,_sage_const_1 <<_sage_const_32 )
		Lb = randint(_sage_const_0 ,_sage_const_1 <<_sage_const_32 )
		R = randint(_sage_const_0 ,_sage_const_1 <<_sage_const_32 )

		L0a = Bin(La,_sage_const_32 )
		L0b = Bin(Lb,_sage_const_32 )
		R0 = Bin(R,_sage_const_32 )
		L0x = Xor(L0a,L0b,_sage_const_32 )

		ma = L0a+R0
		mb = L0b+R0
		Ca = DES3R(ma)
		Cb = DES3R(mb)
		ca = Bin(long(Ca,_sage_const_16 ),_sage_const_64 )
		cb = Bin(long(Cb,_sage_const_16 ),_sage_const_64 )

		L3a = ca[_sage_const_0 :_sage_const_32 ]
		R3a = ca[_sage_const_32 :_sage_const_64 ]
		L3b = cb[_sage_const_0 :_sage_const_32 ]
		R3b = cb[_sage_const_32 :_sage_const_64 ]
		R3x = Xor(R3a,R3b,_sage_const_32 )

		R2a = L3a
		R2b = L3b
		#bits out of expansion of the R2
		REa = Expansion(R2a)
		REb = Expansion(R2b)
		REx = Xor(REa,REb,_sage_const_48 )

		Sinx = REx
		L2x = L0x # L2 = R1 = L0^^F(K,R0)
		Soutx = P32Inverse(Xor(R3x,L2x,_sage_const_32 ))

		SinGroup = spiltByWidth(Sinx,_sage_const_6 )
		SoutGroup = spiltByWidth(Soutx,_sage_const_4 )
		potentialIn = []

		#find the potential input of the SBox
		for groupNum in range(_sage_const_0 ,_sage_const_8 ):
			i=_sage_const_0 
			potentialInGroup = []
			while(i<(_sage_const_1 <<_sage_const_6 )):
				ta = Bin(i,_sage_const_6 )
				tb = Xor(ta,SinGroup[groupNum],_sage_const_6 )
				sa = SingleSBox(ta,groupNum)
				sb = SingleSBox(tb,groupNum)
				if(Xor(sa,sb,_sage_const_4 ) == SoutGroup[groupNum]):
					potentialInGroup.append(ta)
				i=i+_sage_const_1 
			potentialIn.append(potentialInGroup)

		count = _sage_const_1 
		for i in range(_sage_const_0 ,_sage_const_8 ):
			count*=len(potentialIn[i])
		if(count<_sage_const_2000000 ):
			break
	#combination generate
	m = [_sage_const_0 ]*_sage_const_8 
	potentialKey = []
	while(True):
		s=""
		for i in range(_sage_const_0 ,_sage_const_8 ):
			s += potentialIn[i][m[i]]
		potentialKey.append(Xor(s,REa,_sage_const_48 ))
		m[_sage_const_0 ]+=_sage_const_1 
		flag = False
		for i in range(_sage_const_0 ,_sage_const_8 ):
			if(m[i]==len(potentialIn[i])):
				m[i]=_sage_const_0 
				if(i!=_sage_const_7 ):
					m[i+_sage_const_1 ]+=_sage_const_1 
				else:
					flag = True
					break
			else:
				break
		if(flag):
			break

	return set(potentialKey)

#use the 48bits round2 Key to get all possibel original 56bits keys
def getOriginalKeySet(key):
	keyset = set()
	for i in range(_sage_const_0 ,_sage_const_1 <<_sage_const_8 ):
		key2 = PC2Inverse(key,Bin(i,_sage_const_8 ))
		width = _sage_const_28 
		keyGroup = spiltByWidth(key2,width)
		#both group shift right 4 bits
		keyGroup[_sage_const_0 ] = keyGroup[_sage_const_0 ][width-_sage_const_4 :]+keyGroup[_sage_const_0 ][_sage_const_0 :width-_sage_const_4 ]
		keyGroup[_sage_const_1 ] = keyGroup[_sage_const_1 ][width-_sage_const_4 :]+keyGroup[_sage_const_1 ][_sage_const_0 :width-_sage_const_4 ]
		keyset.add(keyGroup[_sage_const_0 ]+keyGroup[_sage_const_1 ])
	return(keyset)

#filter out wrong 56bits key
def filterKey(keyset):
	while(len(keyset)!=_sage_const_1 ):
		key = keyset.pop()
		M = randint(_sage_const_0 ,_sage_const_1 <<_sage_const_64 )
		m = Bin(M,_sage_const_64 )
		c = DES3R(m)
		ctest = DES3RTest(m,key)
		if(c == ctest):
			keyset.add(key)
	return(keyset.pop())

#to test correctness,make sure the original key is the same as key in DES3R.py
keyOrigin = "3f3b57d61e327a82"
keyList = getKey(keyOrigin)
k3 = keyList[_sage_const_2 ]

key48set = getKeySet()
while(len(key48set)!=_sage_const_1 ):
	#for test
	print("len"+str(len(key48set)))
	if(k3 not in key48set):
		print("error")
		break

	key48set = key48set & getKeySet()

key = key48set.pop()
key56set = getOriginalKeySet(key)
key56 = filterKey(key56set)
#key56 is the key derived from original Permutation of Original 64bits key
print(key56)
print(key56 == keyInitial(keyOrigin))
#k2 = keyList[2]
#print(k2)
#print(key==k2)
