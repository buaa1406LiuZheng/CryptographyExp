# This file was *autogenerated* from the file DesOFB.sage
from sage.all_cmdline import *   # import sage library
_sage_const_1 = Integer(1); _sage_const_8 = Integer(8); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16)
from DES import *
from KeyGenerate import *
from binascii import *
from string import *

def Encrypt8Bytes(plaintext,keyList,hexVector):
	hexp = b2a_hex(plaintext)
	hexO = DES(hexVector,keyList)
	Onum = long(hexO,_sage_const_16 )
	pnum = long(hexp,_sage_const_16 )
	cnum = Onum^pnum
	hexc = Hex(cnum,_sage_const_16 )
	hexVector = Hex(Onum,_sage_const_16 )
	c = a2b_hex(hexc)
	return (c,hexVector)

width = _sage_const_8 
hexVector = "1234567890abcdef"
keyHex = "0f1571c847d9e859"
keyList = getKey(keyHex)

while(true):
	select = raw_input("encrypt/decrypt? e/d:")
	if(select == 'e' or select == 'd'):
		break
if(select == 'e'):
	fin = open("text.txt",'r')
	fout = open("DESEncrypt.txt",'w')
else:
	fin = open("DESEncrypt.txt",'r')
	fout = open("DESDecrypt.txt",'w')

s = ""
for line in fin:
	if(len(s)!=_sage_const_0 ):
		lenth = len(s)
		s = s+line[_sage_const_0 :width-lenth]
		if(len(s)<_sage_const_8 ):
			continue
		line = line[width-lenth:]
		(c,hexVector) = Encrypt8Bytes(s,keyList,hexVector)
		s=""
		fout.write(c)
	lineGroup = spiltByWidth(line,width)
	if(len(lineGroup)==_sage_const_0 ):
		continue
	for i in range(_sage_const_0 ,len(lineGroup)-_sage_const_1 ):
		s = lineGroup[i]
		(c,hexVector) = Encrypt8Bytes(s,keyList,hexVector)
		fout.write(c)
	s = lineGroup[len(lineGroup)-_sage_const_1 ]
	if(len(s)==width):
		(c,hexVector) = Encrypt8Bytes(s,keyList,hexVector)
		fout.write(c)
		s=""
#if lenth of plaintext is not a multiple of width
lenth = len(s)
if(lenth!=_sage_const_0 ):
	for i in range(_sage_const_0 ,width-lenth):
		s+=uppercase[i]
	(c,hexVector) = Encrypt8Bytes(s,keyList,hexVector)
	fout.write(c)

fin.close()
fout.close()
