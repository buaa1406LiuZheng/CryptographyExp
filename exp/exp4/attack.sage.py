# This file was *autogenerated* from the file attack.sage
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16); _sage_const_4 = Integer(4)
sage.repl.load.load(sage.repl.load.base64.b64decode("c3Vic3RpdHV0aW9uLnNhZ2U="),globals(),False)
sage.repl.load.load(sage.repl.load.base64.b64decode("c2hpZnRSb3dzLnNhZ2U="),globals(),False)
sage.repl.load.load(sage.repl.load.base64.b64decode("bWl4Q29sdW1ucy5zYWdl"),globals(),False)
sage.repl.load.load(sage.repl.load.base64.b64decode("YWRkUm91bmRLZXkuc2FnZQ=="),globals(),False)
sage.repl.load.load(sage.repl.load.base64.b64decode("a2V5RXhwYW5zaW9uLnNhZ2U="),globals(),False)

def Hex(i,WIDTH):
	s = hex(i)
	return "0"*(WIDTH-len(s))+s
def spiltByWidth(string,width):
	return [string[x:x+width] for x in range(_sage_const_0 ,len(string),width)]
def oneRound(Bytes32,roundKey1,roundKey2):
	Bytes32 = addRoundKey(Bytes32,roundKey1)
	Bytes32 = BytesSubstitution(Bytes32)
	Bytes32 = shiftRows(Bytes32)
	Bytes32 = mixColumns(Bytes32)
	Bytes32 = addRoundKey(Bytes32,roundKey2)
	return Bytes32
def Xor(p1,p2):
	XorMatrix = []
	for i in range(_sage_const_0 ,_sage_const_4 ):		#row i
		row = []
		for j in range(_sage_const_0 ,_sage_const_4 ): 	#column j
			row.append(p1Matrix[i][j]^p2Matrix[i][j])
		XorMatrix.append(row)
	return XorMatrix

p1 = "0123456789abcdeffedcba9876543210"
p2 = "9012bcd9010f703109f78130f09a09b9"
key ="0f1571c947d9e8590cb7add6af7f6798"

t1Group = spiltByWidth(p1,_sage_const_2 )
t2Group = spiltByWidth(p2,_sage_const_2 )
keyGroup = spiltByWidth(key,_sage_const_2 )
for i in range(_sage_const_0 ,_sage_const_16 ):
	t1Group[i] = int(t1Group[i],_sage_const_16 )
	t2Group[i] = int(t2Group[i],_sage_const_16 )
	keyGroup[i] = int(keyGroup[i],_sage_const_16 )
keyMatrix = []
for i in range(_sage_const_0 ,_sage_const_4 ):		#row i
	row = []
	for j in range(_sage_const_0 ,_sage_const_4 ): 	#column j
		row.append(keyGroup[i+_sage_const_4 *j])
	keyMatrix.append(row)
keyList = getKey(keyMatrix)
k0 = keyList[_sage_const_0 ]
k1 = keyList[_sage_const_1 ]
p1Matrix = []
for i in range(_sage_const_0 ,_sage_const_4 ):		#row i
	row = []
	for j in range(_sage_const_0 ,_sage_const_4 ): 	#column j
		row.append(t1Group[i+_sage_const_4 *j])
	p1Matrix.append(row)
p2Matrix = []
for i in range(_sage_const_0 ,_sage_const_4 ):		#row i
	row = []
	for j in range(_sage_const_0 ,_sage_const_4 ): 	#column j
		row.append(t2Group[i+_sage_const_4 *j])
	p2Matrix.append(row)

print(Xor(shiftRows(p1Matrix),shiftRows(p2Matrix)))
print(shiftRows(Xor(p1Matrix,p2Matrix)))
#c1Matrix = oneRound(p1Matrix,k0,k1)
#c2Matrix = oneRound(p2Matrix,k0,k1)
#XorP = Xor(p1Matrix,p2Matrix)
#XorC = Xor(c1Matrix,c2Matrix)
#XorC = mixColumnsInverse(XorC)
#XorC = shiftRowsInverse(XorC)
#print(Xor(mixColumnsInverse(c1Matrix),mixColumnsInverse(c2Matrix)))
##print(XorC)
#print(Xor(addRoundKey(BytesSubstitution(p1Matrix),k0),addRoundKey(BytesSubstitution(p2Matrix),k0)))
